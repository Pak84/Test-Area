PART
{
	// --- general parameters ---
	name = CA_krakenArm
	module = Part
	author = Pak (Art) / Angel-125 (Kerbal Actuators)

	// --- asset parameters ---
	rescaleFactor = 1
	MODEL
	{
		model = Cormorant Aeronology/Assets/KrakenArm/CA_krakenArm
	}

	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_stack_bottom = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0
	node_attach = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0

	// --- editor parameters ---
	TechRequired = actuators
	entryCost = 3250
	cost = 900
	category = Utility
	subcategory = 0
	title = Krakenarm 1
	manufacturer = Wild Blue Industries
	description = This is a simple test part to test functionality for a robot arm.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,1,1

	// --- standard part parameters ---
	mass = 0.375
	dragModelType = default
	maximum_drag = 0.25
	minimum_drag = 0.25
	angularDrag = .5
	crashTolerance = 45
	breakingForce = 280
	breakingTorque = 280
	maxTemp = 2000
	fuelCrossFeed = True
	heatConductivity = 0.001

	MODULE
	{
		name = WBILightController
		servoName = Effector Light
		lightName = spotlight
		useAnimationDim = false
		lightBrightenSpeed = 2.5
		lightDimSpeed = 2.5
		resourceAmount = 0.04
		animationName = 
		useResources = false
	}

	MODULE
	{
		name = WBIMagnetController
		debugMode = true
		magnetTransformName = CA_endTip
		groupID = Arm
		ecPerSec = 1.0

		attachEffectName = attachMagnet
		detachEffectName = detachMagnet
		runningEffectName = runningMagnet
	}

	MODULE
	{
		name = WBIRotationController
		servoName = Rotate Wrist //UI name
		groupID = Arm
		rotationMeshName = CA_foreROT //pivot name
		rotationMeshAxis = 0,0,1 //Rotation axis of the pivot (x, y, z)
		guiVisible = false
		canMirrorRotation = false
		rotationDegPerSec = 15 // deg/sec
		runningEffectName = runningServo
	}

	MODULE
	{
		name = WBIRotationController
		servoName = Yaw Wrist
		groupID = Arm
		rotationMeshName = CA_end
		rotationMeshAxis = 0,1,0 //Rotation axis of the pivot (x, y, z)
		guiVisible = false
		canMirrorRotation = false
		rotationDegPerSec = 15

		//Maximum rotation angle
		//From 0 to 360 degrees
		//Min --- Neutral (0) --- Max
		//NOTE: if maxRotateAngle & minRotateAngle = -1 (which is the default),
		//then the rotation pivot can go 360 degrees.
		maxRotateAngle = 90

		//Minimum rotation angle (0 to 360 degrees)
		minRotateAngle = 270

		//Can we rotate to minimum?
		canRotateMin = true

		//Can we rotate to maximum?
		canRotateMax = true

		//Name of the rotate to maximum button (only applies if gui buttons are visible)
		rotateMaxName = To Maximum
	
		//Name of the rotate to minimum button (only applies if gui buttons are visible)
		rotateMinName = To Minimum

		//Name of the rotate to neutral button (only applies if gui buttons are visible)
		rotateNeutralName = To Neutral

		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Wrist

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = CA_wrist

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Maximum rotation angle
		//From 0 to 360 degrees
		//Min --- Neutral (0) --- Max
		//NOTE: if maxRotateAngle & minRotateAngle = -1 (which is the default),
		//then the rotation pivot can go 360 degrees.
		maxRotateAngle = 115

		//Minimum rotation angle (0 to 360 degrees)
		minRotateAngle = 245

		//Can we rotate to minimum?
		//Ex: tilt-rotor can pivot up and forward and that's it.
		canRotateMin = true

		//Can we rotate to maximum?
		canRotateMax = true

		//Name of the rotate to maximum button (only applies if gui buttons are visible)
		rotateMaxName = To Maximum
	
		//Name of the rotate to minimum button (only applies if gui buttons are visible)
		rotateMinName = To Minimum

		//Name of the rotate to neutral button (only applies if gui buttons are visible)
		rotateNeutralName = To Neutral

		//Effect to play when a servo is running
		//Primarily used when manually moving the servo.
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Elbow

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = CA_forearm

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		maxRotateAngle = 115

		//Minimum rotation angle (0 to 360 degrees)
		minRotateAngle = 265

		canRotateMin = true
		canRotateMax = true

		//Name of the rotate to maximum button (only applies if gui buttons are visible)
		rotateMaxName = Elevate To Maximum
	
		//Name of the rotate to minimum button (only applies if gui buttons are visible)
		rotateMinName = Elevate To Minimum

		//Name of the rotate to neutral button (only applies if gui buttons are visible)
		rotateNeutralName = Elevate To Neutral

		//Effect to play when a servo is running
		//Primarily used when manually moving the servo.
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Shoulder

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = CA_arm1

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Maximum rotation angle
		//From 0 to 360 degrees
		//Min --- Neutral (0) --- Max
		//NOTE: if maxRotateAngle & minRotateAngle = -1 (which is the default),
		//then the rotation pivot can go 360 degrees.
		maxRotateAngle = 0

		//Minimum rotation angle (0 to 360 degrees)
		minRotateAngle = 200

		//The current rotation angle. We don't need to set this but for Kanadarm,
		//we set a starting angle for the arm.
		currentRotationAngle = 0

		//Can we rotate to minimum?
		//Ex: tilt-rotor can pivot up and forward and that's it.
		canRotateMin = true

		//Can we rotate to maximum?
		canRotateMax = true

		//Name of the rotate to maximum button (only applies if gui buttons are visible)
		rotateMaxName = Elevate To Maximum
	
		//Name of the rotate to minimum button (only applies if gui buttons are visible)
		rotateMinName = Elevate To Minimum

		//Name of the rotate to neutral button (only applies if gui buttons are visible)
		rotateNeutralName = Elevate To Neutral

		//Effect to play when a servo is running
		//Primarily used when manually moving the servo.
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Rotate Shoulder

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = CA_shoulderYaw

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,1,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		currentRotationAngle = 270
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Effect to play when a servo is running
		//Primarily used when manually moving the servo.
		runningEffectName = runningServo
	}

	//Put this module LAST in the list of rotation controllers and such.
	//It provides a button to display a GUI.
	MODULE
	{
		name = WBIServoManager

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	EFFECTS
	{
		attachMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = Squad/Sounds/elev_start
				volume = 1.0
				pitch = 1.0
				loop = false
			}
		}

		detachMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = Squad/Sounds/sound_click_tock
				volume = 1.0
				pitch = 1.0
				loop = false
			}
		}
		runningMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/001KerbalActuators/Sounds/MagnetRunning
				volume = 0.0 0.0
				volume = 1.0 0.1
				pitch = 0.0 0.0
				pitch = 1.0 1.5
				loop = true
			}
		}
		runningServo
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/001KerbalActuators/Sounds/ServoLoop
				volume = 0.0 0.0
				volume = 1.0 10.0
				pitch = 1.0 1.0
				loop = true
			}
		}
	}
}
